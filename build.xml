<?xml version="1.0" encoding="utf-8"?>
<project name="Project builder" default="buildDebug">

    <!-- include project properties (overrides values below) -->
    <property file="build.properties"/>
    <property file="build.user.properties"/>
    <property file="build.game.properties"/>


    <!-- Default values -->
    <property name="package" value="${basedir}/src/com/gsn/games/mygame"/>
    <property name="appName" value="my_app"/>
    <property name="appClass" value="${package}/${appName}.as"/>
    <property name="appSwfFile" value="${appName}.swf"/>
    <property name="appTitle" value="${appName}"/>
    <!--<property name="appHtmlFile" value="${appName}.html" />-->
    <property name="loaderName" value="GameLoader"/>
    <property name="loaderClass" value="${package}/${loaderName}.as"/>
    <property name="loaderSwfFile" value="${loaderName}.swf"/>
    <property name="loaderHtmlFile" value="${loaderName}.html"/>
    <property name="progressBarName" value="ProgressBar"/>
    <property name="progressBarSwfFile" value="${progressBarName}.swf"/>
    <property name="appWidth" value="760"/>
    <property name="appHeight" value="570"/>
    <property name="frameRate" value="30"/>
    <property name="bgColor" value="FFFFFF"/>
    <property name="flashVars" value=""/>
    <property name="version-major" value="11"/>
    <property name="version-minor" value="1"/>
    <property name="version-revision" value="0"/>
	<property name="wmode" value="direct"/>

    <!-- other values -->
    <property name="buildDirDebug" value="${basedir}/bin-debug"/>
    <property name="buildDirRelease" value="${basedir}/bin-release"/>

    <property name="assetsDir" value="${basedir}/assets"/>
    <property name="assetsSrc" value="${basedir}/assets-src"/>
    <property name="distributeDir" value="distribute"/>
    <property name="compilerJSFL" value="${basedir}/compiler.jsfl"/>
    <property name="tempCompilerJSFL" value="${basedir}/temp_compiler.jsfl"/>

    <property name="themeDir" value="${basedir}/themes/default"/>

    <property name="fbHome" value="/Applications/Adobe Flash Builder 4.6"/>
    <property name="flexHome" value="${fbHome}/sdks/4.6.0"/>
    <property name="FLEX_HOME" value="${flexHome}"/>
    <taskdef resource="flexTasks.tasks" classpath="${flexHome}/ant/lib/flexTasks.jar"/>

    <property name="flashHome" value="/Applications/Adobe Flash CS6/Adobe Flash CS6.app/Contents/MacOS/Adobe Flash CS6"/>

    <property name="assetBundleJSFLFile" value="BundleAssets_v1.5.1.jsfl"/>
    <property name="tempAssetBundleJSFLFile" value="temp_${assetBundleJSFLFile}"/>
    <property name="bundlesSource" value="${basedir}/bundles-src/"/>
    <property name="bundlesOutput" value="${assetsDir}/bundles/"/>
    <property name="deleteBundleFLAs" value="true"/>

    <!-- Platform check -->
    <condition property="isMac">
        <os family="mac"/>
    </condition>
    <condition property="isWindows">
        <os family="windows"/>
    </condition>

    <!-- Set the path to the external app by platform -->
    <target name="setExternalAppPath" depends="setMacPath,setWinPath">
        <echo>setting path ${ExecutableApp}</echo>
    </target>
    <target name="setMacPath" if="isMac">
        <property name="ExecutableApp" value="open"/>
        <property name="platformBundlesSource" value="${bundlesSource}"/>
        <property name="platformBundlesOutput" value="${bundlesOutput}"/>
        <property name="JSFLErrorFile" value="${platformBundlesOutput}errors.txt"/>
        <echo>set mac ${isMac}</echo>
    </target>
    <target name="setWinPath" if="isWindows">
        <property name="ExecutableApp" value="${flashHome}"/>

        <!-- Replace the :\ with a | and \ to / -->
        <loadresource property="platformBundlesSource">
            <propertyresource name="bundlesSource"/>
            <filterchain>
                <tokenfilter>
                    <filetokenizer/>
                    <replacestring from=":\" to="|/"/>
                    <replacestring from="\" to="/"/>
                </tokenfilter>
            </filterchain>
        </loadresource>

        <!-- Replace the :\ with a | and \ to / -->
        <loadresource property="platformBundlesOutput">
            <propertyresource name="bundlesOutput"/>
            <filterchain>
                <tokenfilter>
                    <filetokenizer/>
                    <replacestring from=":\" to="|/"/>
                    <replacestring from="\" to="/"/>
                </tokenfilter>
            </filterchain>
        </loadresource>

        <property name="JSFLErrorFile" value="${platformBundlesOutput}errors.txt"/>

        <echo>set win ${isWindows}</echo>
    </target>

    <!-- Compile all external fla and xfl files -->
    <target name="compileAllExternal" depends="setExternalAppPath" description="Compile all FLA/XFL files into /assets">

        <!-- Get all files of type .fla or .xfl -->
        <fileset dir="${assetsSrc}" id="extFiles">
            <include name="**/*.fla"/>
            <include name="**/*.xfl"/>
        </fileset>

        <!-- Convert to a string for JSFL -->
        <pathconvert pathsep="," property="extFilesString" refid="extFiles"/>

        <!-- Create temp -->
        <copy file="${compilerJSFL}" tofile="${tempCompilerJSFL}" overwrite="true"/>

        <!-- Pass in vars -->
        <replace file="${tempCompilerJSFL}" token="@fileList@" value="${extFilesString}"/>
        <replace file="${tempCompilerJSFL}" token="@pubdir@" value="${assetsDir}/"/>

        <!-- Execute JSFL -->
        <exec executable="${ExecutableApp}" failonerror="true" dir=".">
            <!-- Wait for task to complete -->
            <arg value="-W"/>
            <arg value="${tempCompilerJSFL}"/>
        </exec>

        <!-- Delete temp JSFL -->
        <delete file="${tempCompilerJSFL}"/>

    </target>

    <!-- Bundle assets -->
    <target name="bundleAssets" depends="setExternalAppPath" description="Build the asset bundles into /assets/bundles">

        <!-- CREATE TEMP DUPLICATE OF JSFL -->
        <copy file="${assetBundleJSFLFile}" tofile="${tempAssetBundleJSFLFile}" overwrite="true"/>

        <!-- REPLACE VARS IN JSFL -->
        <replace file="${tempAssetBundleJSFLFile}" token="@srcpath@" value="file:///${platformBundlesSource}"/>
        <replace file="${tempAssetBundleJSFLFile}" token="@destpath@" value="file:///${platformBundlesOutput}"/>
        <replace file="${tempAssetBundleJSFLFile}" token="@deletebundles@" value="${deleteBundleFLAs}"/>

        <!-- DELETE ERROR FILE -->
        <delete file="${JSFLErrorFile}"/>

        <!-- EXECUTE JSFL -->
        <exec executable="${ExecutableApp}" failonerror="true" dir=".">
            <arg value="${tempAssetBundleJSFLFile}"/>
        </exec>

        <!-- WAIT FOR COMPLETE -->
        <waitfor maxwait="30" maxwaitunit="minute" timeoutproperty="flashTimeout">
            <available file="${JSFLErrorFile}"/>
        </waitfor>
        <echo message="JSFL script finished"/>
        <fail if="flashTimeout" message="Flash did not finish within 30 minutes"/>

        <!-- DELETE TEMP FILE -->
        <delete file="${tempAssetBundleJSFLFile}"/>

    </target>

    <!-- compile the main loader -->
    <target name="build">
        <fail message="Don't use this target directly! Use buildDebug or buildRelease" unless="buildDir"/>
        <echo>${loaderClass}</echo>

        <!-- clean build dir -->
        <delete quiet="true" includeemptydirs="true">
            <fileset dir="${buildDir}"/>
        </delete>

        <!-- copy assets -->
        <copy todir="${buildDir}/assets">
            <fileset dir="${assetsDir}"/>
        </copy>
        <!-- generate loader class -->
        <antcall target="updateLoaderMetatag"/>
        <mxmlc file="${loaderClass}" output="${buildDir}/build_${loaderSwfFile}" debug="${isDebug}" incremental="false" static-link-runtime-shared-libraries="true">
            <source-path path-element="src"/>
            <compiler.library-path dir="${basedir}/libs/" append="true">
                <include name="*"/>
                <exclude name="**/*debug*" unless="${isDebug}"/>
            </compiler.library-path>
            <define name="CONFIG::DEBUG" value="${isDebug}"/>
            <!-- ## needed? -->
            <!-- <define name="CONFIG::ANALYTICS" value="true"/> -->
        </mxmlc>
        <!-- we use the build_ name to avoid Flash Builder cache when dependency checking-->
        <copy file="${buildDir}/build_${loaderSwfFile}" tofile="${buildDir}/${loaderSwfFile}" overwrite="true"/>
        <delete file="${buildDir}/build_${loaderSwfFile}"/>

        <!-- generate main class -->
        <mxmlc file="${appClass}" output="${buildDir}/build_${appSwfFile}" debug="${isDebug}" incremental="false" static-link-runtime-shared-libraries="true">
            <source-path path-element="src"/>
            <compiler.library-path dir="${basedir}/libs/" append="true">
                <include name="*"/>
                <exclude name="**/*debug*" unless="${isDebug}"/>
            </compiler.library-path>
            <define name="CONFIG::DEBUG" value="${isDebug}"/>
            <!-- ## needed? -->
            <!-- <define name="CONFIG::ANALYTICS" value="true"/> -->
        </mxmlc>
        <!-- we use the build_ name to avoid Flash Builder cache when dependency checking-->
        <copy file="${buildDir}/build_${appSwfFile}" tofile="${buildDir}/${appSwfFile}" overwrite="true"/>
        <delete file="${buildDir}/build_${appSwfFile}"/>

    </target>

    <!-- generate the wrapper html for the loader -->
    <target name="wrapper">

        <html-wrapper title="${appTitle}" file="${loaderName}.html" height="${appHeight}" width="${appWidth}" bgcolor="${bgColor}" application="app" swf="${loaderName}" output="${buildDir}"
                      version-major="${version-major}" version-minor="${version-minor}" version-revision="${version-revision}"/>

        <!-- add user's flashvars -->
        <replaceregexp file="${buildDir}/${loaderHtmlFile}" match="var flashvars = \{\};" replace='var flashvars = {${flashVars}};'/>

        <!-- add wmode -->
        <replaceregexp file="${buildDir}/${loaderHtmlFile}" match="var params = \{\};" replace='var params = {wmode:${wmode}};'/>

    </target>

    <!-- update the metatags in the loader swf -->
    <target name="updateLoaderMetatag">
        <replaceregexp>
            <regexp pattern="\[SWF\(.*\)\]"/>
            <substitution expression='[SWF(width="${appWidth}", height="${appHeight}", frameRate="${frameRate}", backgroundColor="#${bgColor}")]'/>
            <fileset dir="${package}">
                <include name="${loaderName}.as"/>
            </fileset>
        </replaceregexp>
        <replaceregexp>
            <regexp pattern="\[appPathDefinition\(.*\)\]"/>
            <substitution expression='[appPathDefinition(pathName="${appSwfFile}")]'/>
            <fileset dir="${package}">
                <include name="${loaderName}.as"/>
            </fileset>
        </replaceregexp>
        <replaceregexp>
            <regexp pattern="\[progressPathDefinition\(.*\)\]"/>
            <substitution expression='[progressPathDefinition(pathName="${progressBarSwfFile}")]'/>
            <fileset dir="${package}">
                <include name="${loaderName}.as"/>
            </fileset>
        </replaceregexp>
        <replaceregexp>
            <regexp pattern="\[SWF\(.*\)\]"/>
            <substitution expression='[SWF(width="${appWidth}", height="${appHeight}", frameRate="${frameRate}", backgroundColor="#${bgColor}")]'/>
            <fileset dir="${package}">
                <include name="${appName}.as"/>
            </fileset>
        </replaceregexp>
    </target>

    <!-- Clean out the bin-debug and bin-release folders -->
    <target name="cleanAll" description="Clean bin-debug and bin-release">
        <delete quiet="true" includeemptydirs="true">
            <fileset dir="${buildDirDebug}"/>
        </delete>
        <delete quiet="true" includeemptydirs="true">
            <fileset dir="${buildDirRelease}"/>
        </delete>
    </target>

    <!-- Clean out the bin-release folder -->
    <target name="cleanReleaseBin" description="Clean bin-release">
        <delete quiet="true" includeemptydirs="true">
            <fileset dir="${buildDirRelease}"/>
        </delete>
    </target>

    <!-- Clean out the bin-debug folder -->
    <target name="cleanDebugBin" description="Clean bin-debug">
        <delete quiet="true" includeemptydirs="true">
            <fileset dir="${buildDirDebug}"/>
        </delete>
    </target>

    <!-- Zip the files in bin-debug -->
    <target name="zipBinDebug" depends="buildDebug" description="Builds the bin-debug folder, then zips the required files">
        <mkdir dir="${distributeDir}"/>
        <!-- Time stamp the file name -->
        <tstamp>
            <format property="zip_time" pattern="yyyy-MM-dd'T'HH_mm_ss"/>
        </tstamp>
        <echo>time: ${zip_time}</echo>
        <zip destfile="${distributeDir}/${appName}-debug-${zip_time}.zip" update="true">
            <zipfileset dir="${buildDirDebug}/assets" prefix="assets">
            </zipfileset>
            <fileset dir="${buildDirDebug}">
                <include name="${appSwfFile}"/>
                <include name="${loaderSwfFile}"/>
            </fileset>
        </zip>
    </target>

    <!-- Zip the files in bin-release -->
    <target name="zipBinRelease" depends="buildRelease" description="Builds the bin-release folder, then zips the required files">
        <mkdir dir="${distributeDir}"/>
        <!-- Time stamp the file name -->
        <tstamp>
            <format property="zip_time" pattern="yyyy-MM-dd'T'HH_mm_ss"/>
        </tstamp>
        <echo>time: ${zip_time}</echo>
        <zip destfile="${distributeDir}/${appName}-release-${zip_time}.zip" update="true">
            <zipfileset dir="${buildDirRelease}/assets" prefix="assets">
            </zipfileset>
            <fileset dir="${buildDirRelease}">
                <include name="${appSwfFile}"/>
                <include name="${loaderSwfFile}"/>
            </fileset>
        </zip>
    </target>

    <!-- Build the debug version -->
    <target name="buildDebug" description="Build the debug version">
        <antcall target="build">
            <param name="buildDir" value="${buildDirDebug}"/>
            <param name="isDebug" value="true"/>
        </antcall>
        <antcall target="wrapper">
            <param name="buildDir" value="${buildDirDebug}"/>
        </antcall>
    </target>

    <!-- Build the release version -->
    <target name="buildRelease" description="Build the release version">
        <antcall target="build">
            <param name="buildDir" value="${buildDirRelease}"/>
            <param name="isDebug" value="false"/>
        </antcall>
    </target>

    <!-- Copy files from theme directory -->
    <target name="copyThemeDir" description="Copy files from theme directory">
        <echo>Copying theme files to base directories from: ${themeDir}</echo>
        <copy todir="${assetsDir}" failonerror="false">
            <fileset dir="${themeDir}/assets"/>
        </copy>
        <copy todir="${assetsSrc}" failonerror="false">
            <fileset dir="${themeDir}/assets-src"/>
        </copy>
        <copy todir="${bundlesSource}" failonerror="false">
            <fileset dir="${themeDir}/bundles-src"/>
        </copy>
        <echo>Copying default files to base directories. Does not overwrite theme files.</echo>
        <copy todir="${basedir}" overwrite="false">
            <fileset dir="${basedir}/themes/default"/>
        </copy>
    </target>

    <!-- Clear files from assetsSrc assetsDir and bundlesSource -->
    <target name="clearRootAssetsAndBundles" description="Clear files from assetsSrc assetsDir and bundlesSource">
        <delete quiet="true" includeemptydirs="true">
            <fileset dir="${assetsDir}"/>
        </delete>
        <delete quiet="true" includeemptydirs="true">
            <fileset dir="${assetsSrc}"/>
        </delete>
        <delete quiet="true" includeemptydirs="true">
            <fileset dir="${bundlesSource}"/>
        </delete>
    </target>

</project>
